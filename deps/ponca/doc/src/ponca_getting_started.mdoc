/*
 This Source Code Form is subject to the terms of the Mozilla Public
 License, v. 2.0. If a copy of the MPL was not distributed with this
 file, You can obtain one at http://mozilla.org/MPL/2.0/.
*/

/*!
  \page ponca_getting_started_page Getting started

  \section getting_started_requirements_sec Requirements

  The only external library that is absolutely necessary to make Ponca work is <a href="http://eigen.tuxfamily.org/" target="_blank"><b>Eigen</b></a>, the swiss army knife of linear algebra. Some examples will require additional libraries in an effort to keep them lean and legible. We'll try to keep these dependencies to the minimum necessary, promised.

  The modules are also compatible with CUDA, so that you may run Ponca on the GPU, provided you own an NVidia graphics card. This is an efficient way to make Ponca available through CUDA-compatible languages such as Matlab or Python. Eigen can be compiled by nvcc (NVIDIA CUDA Compiler Driver), see <a href="http://eigen.tuxfamily.org/dox-devel/TopicCUDA.html"  target="_blank">Eigen documentation</a> for more details.

  \section getting_started_download_sec Download

  The Ponca library is currently under active development and some functionalities have already been implemented and thoroughly tested. If you want to get a taste of these prime features, use the latest package available here: https://github.com/poncateam/ponca/releases.

  You may also want to monitor our efforts in developping the library, in which case you will want to access the development repository:
  \code
  git clone https://github.com/poncateam/ponca.git
  \endcode

  \section getting_started_installation_sec Installation

  Ponca is an header-only library. It could not be easier to install: the only thing you have to do is to include the main header in your code.
  \code
  #include <Ponca/Ponca>
  \endcode
  To speed-up compilation, you may only use the header corresponding to the module you are interested in. For example:
  \code
  #include <Ponca/Fitting>
  \endcode

  We also provide a relocatable `cmake` package, shipped with Ponca releases, or generated by calling `make install`.
  Example of file `CMakeLists.txt` using Ponca's cmake package:
  \code
  cmake_minimum_required(VERSION 3.11)

  project(PoncaTest LANGUAGES CXX)

  find_package(Ponca REQUIRED)

  add_executable(test main.cpp)
  target_link_libraries(test Ponca::Fitting)
  \endcode



  That said, the (quite heavy) use of templates in some modules may increase compilation times. Precompiled headers are recommended if this becomes a source of frustration. You will also have to pre-compile Ponca using nvcc if you want to use CUDA versions. This is explained in more details in related examples.

  If you want to see Ponca in action, you will of course have to compile examples. And the same is true if you want to get the latest version of the documentation you are presently reading (well, not the exact same documentation, unless you've already compiled it, but then why are you reading this?). In both cases, have a look at the readme file, everything is explained there, no need to duplicate that here.

  \section getting_started_first_step_sec First steps

  You're now ready to play with Ponca! Checkout the user manual here:  \ref user_manual_page.

  If you get stuck or have a problem/bug using Ponca, please open an issue here: https://github.com/poncateam/ponca/issues. Remember that the library is under development so we are pleased to get your feedback.
 */
